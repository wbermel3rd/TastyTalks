{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { onMounted, ref } from 'vue';\nimport { collection, getDocs } from 'firebase/firestore';\nimport { db } from '../firebase';\nimport { useRouter } from 'vue-router';\nexport default {\n  setup() {\n    const router = useRouter();\n    const questions = ref([]);\n    const selectedRegion = ref('');\n\n    // Define a map to store region names based on IDs\n    const regionMap = {\n      1: 'Asia-Pacific',\n      2: 'Caribbean',\n      3: 'Central America',\n      4: 'Central Asia',\n      5: 'Eastern Europe',\n      6: 'Middle East',\n      7: 'Nordic Countries',\n      8: 'North America',\n      9: 'Northern Africa',\n      10: 'Oceania',\n      11: 'Southern Africa',\n      12: 'South America',\n      13: 'Southeast Asia',\n      14: 'Western Europe'\n      // Add more entries for other regions\n    };\n\n    const getRegionName = regionID => {\n      return regionMap[regionID] || 'Unknown Region';\n    };\n    const fetchQuestions = async () => {\n      const questionsCollection = collection(db, 'questions');\n      const querySnapshot = await getDocs(questionsCollection);\n      const filteredQuestions = [];\n      querySnapshot.forEach(doc => {\n        const questionData = doc.data();\n\n        // Check if the question matches the selected region\n        const matchesRegion = selectedRegion.value === '' || questionData.regionID === selectedRegion.value;\n        if (matchesRegion) {\n          filteredQuestions.push({\n            id: doc.id,\n            ...questionData\n          });\n        }\n      });\n      questions.value = filteredQuestions;\n    };\n    const goToQuestion = questionId => {\n      router.push({\n        name: 'Question',\n        params: {\n          id: questionId\n        }\n      });\n    };\n    onMounted(() => {\n      fetchQuestions();\n    });\n    return {\n      questions,\n      goToQuestion,\n      selectedRegion,\n      fetchQuestions,\n      getRegionName\n    };\n  }\n};","map":{"version":3,"names":["onMounted","ref","collection","getDocs","db","useRouter","setup","router","questions","selectedRegion","regionMap","getRegionName","regionID","fetchQuestions","questionsCollection","querySnapshot","filteredQuestions","forEach","doc","questionData","data","matchesRegion","value","push","id","goToQuestion","questionId","name","params"],"sources":["C:\\Users\\willa\\Documents\\GitHub\\ITSC-3155\\TastyTalks\\tastytalks\\src\\views\\QuestionFeed.vue"],"sourcesContent":["<!-- QuestionFeed.vue -->\r\n<template>\r\n    <main>\r\n      <div class=\"question-feed\">\r\n        <div class=\"centered-container\">\r\n          <h1 class=\"cylinder-heading\">Questions</h1>\r\n        </div>\r\n  \r\n        <p class=\"page-instructions\">\r\n          Explore questions from the community. Click on a question to view details and participate in the discussion.\r\n        </p>\r\n  \r\n        <!-- Filter Section -->\r\n        <div class=\"filter-container\">\r\n          <!-- Region Filter -->\r\n          <label for=\"region\" class=\"heading-stylized\">Filter Region:</label>\r\n          <select v-model=\"selectedRegion\" @change=\"fetchQuestions\">\r\n            <option value=\"\">Select Region</option>\r\n            <option value=\"1\">Asia-Pacific</option>\r\n            <option value=\"2\">Caribbean</option>\r\n            <option value=\"3\">Central America</option>\r\n            <option value=\"4\">Central Asia</option>\r\n            <option value=\"5\">Eastern Europe</option>\r\n            <option value=\"6\">Middle East</option>\r\n            <option value=\"7\">Nordic Countries</option>\r\n            <option value=\"8\">North America</option>\r\n            <option value=\"9\">Northern Africa</option>\r\n            <option value=\"10\">Oceania</option>\r\n            <option value=\"11\">Southern Africa</option>\r\n            <option value=\"12\">South America</option>\r\n            <option value=\"13\">Southeast Asia</option>\r\n            <option value=\"14\">Western Europe</option>\r\n            <!-- Add more options for other regions -->\r\n          </select>\r\n        </div>\r\n  \r\n        <div class=\"question-list\">\r\n          <div v-for=\"question in questions\" :key=\"question.id\" class=\"question-item\" @click=\"goToQuestion(question.id)\">\r\n            <div class=\"question-content\">\r\n              <h2 class=\"question-title\">{{ question.title }}</h2>\r\n              <p>{{ question.body }}</p>\r\n              <!-- Display region instead of tags -->\r\n              <div class=\"region\">\r\n                <strong>Region:</strong>\r\n                <span>{{ getRegionName(question.regionID) }}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <br>\r\n      </div>\r\n    </main>\r\n  </template>\r\n  \r\n  <script>\r\n  import { onMounted, ref } from 'vue';\r\n  import { collection, getDocs } from 'firebase/firestore';\r\n  import { db } from '../firebase';\r\n  import { useRouter } from 'vue-router';\r\n  \r\n  export default {\r\n    setup() {\r\n      const router = useRouter();\r\n      const questions = ref([]);\r\n      const selectedRegion = ref('');\r\n  \r\n      // Define a map to store region names based on IDs\r\n      const regionMap = {\r\n        1: 'Asia-Pacific',\r\n        2: 'Caribbean',\r\n        3: 'Central America',\r\n        4: 'Central Asia',\r\n        5: 'Eastern Europe',\r\n        6: 'Middle East',\r\n        7: 'Nordic Countries',\r\n        8: 'North America',\r\n        9: 'Northern Africa',\r\n        10: 'Oceania',\r\n        11: 'Southern Africa',\r\n        12: 'South America',\r\n        13: 'Southeast Asia',\r\n        14: 'Western Europe',\r\n        // Add more entries for other regions\r\n      };\r\n  \r\n      const getRegionName = (regionID) => {\r\n        return regionMap[regionID] || 'Unknown Region';\r\n      };\r\n  \r\n      const fetchQuestions = async () => {\r\n        const questionsCollection = collection(db, 'questions');\r\n        const querySnapshot = await getDocs(questionsCollection);\r\n  \r\n        const filteredQuestions = [];\r\n  \r\n        querySnapshot.forEach((doc) => {\r\n          const questionData = doc.data();\r\n  \r\n          // Check if the question matches the selected region\r\n          const matchesRegion = selectedRegion.value === '' || questionData.regionID === selectedRegion.value;\r\n  \r\n          if (matchesRegion) {\r\n            filteredQuestions.push({\r\n              id: doc.id,\r\n              ...questionData,\r\n            });\r\n          }\r\n        });\r\n  \r\n        questions.value = filteredQuestions;\r\n      };\r\n  \r\n      const goToQuestion = (questionId) => {\r\n        router.push({ name: 'Question', params: { id: questionId } });\r\n      };\r\n  \r\n      onMounted(() => {\r\n        fetchQuestions();\r\n      });\r\n  \r\n      return {\r\n        questions,\r\n        goToQuestion,\r\n        selectedRegion,\r\n        fetchQuestions,\r\n        getRegionName,\r\n      };\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  \r\n  <style scoped>\r\n  .question-feed {\r\n    max-width: 80%; /* Set the maximum width to 80% of the viewport */\r\n    margin: 0 auto; /* Center the question feed horizontally */\r\n  }\r\n  \r\n  /* Your existing styles remain unchanged */\r\n  \r\n  .question-list {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 20px;\r\n  }\r\n  \r\n  .question-item {\r\n    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);\r\n    padding: 20px;\r\n    border-radius: 8px;\r\n    background-color: #bbc9f1;\r\n    transition: transform 0.3s ease-in-out;\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  .region {\r\n    margin-top: 10px;\r\n    font-size: 16px;\r\n  }\r\n  </style>\r\n  "],"mappings":";AAuDE,SAASA,SAAS,EAAEC,GAAE,QAAS,KAAK;AACpC,SAASC,UAAU,EAAEC,OAAM,QAAS,oBAAoB;AACxD,SAASC,EAAC,QAAS,aAAa;AAChC,SAASC,SAAQ,QAAS,YAAY;AAEtC,eAAe;EACbC,KAAKA,CAAA,EAAG;IACN,MAAMC,MAAK,GAAIF,SAAS,CAAC,CAAC;IAC1B,MAAMG,SAAQ,GAAIP,GAAG,CAAC,EAAE,CAAC;IACzB,MAAMQ,cAAa,GAAIR,GAAG,CAAC,EAAE,CAAC;;IAE9B;IACA,MAAMS,SAAQ,GAAI;MAChB,CAAC,EAAE,cAAc;MACjB,CAAC,EAAE,WAAW;MACd,CAAC,EAAE,iBAAiB;MACpB,CAAC,EAAE,cAAc;MACjB,CAAC,EAAE,gBAAgB;MACnB,CAAC,EAAE,aAAa;MAChB,CAAC,EAAE,kBAAkB;MACrB,CAAC,EAAE,eAAe;MAClB,CAAC,EAAE,iBAAiB;MACpB,EAAE,EAAE,SAAS;MACb,EAAE,EAAE,iBAAiB;MACrB,EAAE,EAAE,eAAe;MACnB,EAAE,EAAE,gBAAgB;MACpB,EAAE,EAAE;MACJ;IACF,CAAC;;IAED,MAAMC,aAAY,GAAKC,QAAQ,IAAK;MAClC,OAAOF,SAAS,CAACE,QAAQ,KAAK,gBAAgB;IAChD,CAAC;IAED,MAAMC,cAAa,GAAI,MAAAA,CAAA,KAAY;MACjC,MAAMC,mBAAkB,GAAIZ,UAAU,CAACE,EAAE,EAAE,WAAW,CAAC;MACvD,MAAMW,aAAY,GAAI,MAAMZ,OAAO,CAACW,mBAAmB,CAAC;MAExD,MAAME,iBAAgB,GAAI,EAAE;MAE5BD,aAAa,CAACE,OAAO,CAAEC,GAAG,IAAK;QAC7B,MAAMC,YAAW,GAAID,GAAG,CAACE,IAAI,CAAC,CAAC;;QAE/B;QACA,MAAMC,aAAY,GAAIZ,cAAc,CAACa,KAAI,KAAM,EAAC,IAAKH,YAAY,CAACP,QAAO,KAAMH,cAAc,CAACa,KAAK;QAEnG,IAAID,aAAa,EAAE;UACjBL,iBAAiB,CAACO,IAAI,CAAC;YACrBC,EAAE,EAAEN,GAAG,CAACM,EAAE;YACV,GAAGL;UACL,CAAC,CAAC;QACJ;MACF,CAAC,CAAC;MAEFX,SAAS,CAACc,KAAI,GAAIN,iBAAiB;IACrC,CAAC;IAED,MAAMS,YAAW,GAAKC,UAAU,IAAK;MACnCnB,MAAM,CAACgB,IAAI,CAAC;QAAEI,IAAI,EAAE,UAAU;QAAEC,MAAM,EAAE;UAAEJ,EAAE,EAAEE;QAAW;MAAE,CAAC,CAAC;IAC/D,CAAC;IAED1B,SAAS,CAAC,MAAM;MACda,cAAc,CAAC,CAAC;IAClB,CAAC,CAAC;IAEF,OAAO;MACLL,SAAS;MACTiB,YAAY;MACZhB,cAAc;MACdI,cAAc;MACdF;IACF,CAAC;EACH;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}