{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, renderList as _renderList, Fragment as _Fragment, vModelText as _vModelText, withDirectives as _withDirectives, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-dbe2500a\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  key: 0,\n  class: \"full-post-view\"\n};\nconst _hoisted_2 = {\n  key: 1\n};\nconst _hoisted_3 = {\n  class: \"comments-container\"\n};\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", {\n  class: \"comments-header\"\n}, \"Comments:\", -1 /* HOISTED */));\nconst _hoisted_5 = {\n  class: \"comment-card\"\n};\nconst _hoisted_6 = {\n  class: \"comment-author\"\n};\nconst _hoisted_7 = {\n  class: \"comment-text\"\n};\nconst _hoisted_8 = {\n  class: \"comment-date\"\n};\nconst _hoisted_9 = {\n  key: 0,\n  class: \"comment-box\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"main\", null, [$data.post ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"h1\", null, _toDisplayString($data.post.title), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString($data.post.instructions), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString($data.post.date), 1 /* TEXT */), _createCommentVNode(\" Display other post details and comments \")])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_2, \" Loading post... \")), _createElementVNode(\"div\", _hoisted_3, [_hoisted_4, _createCommentVNode(\" Comments Section \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.comments, comment => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"comments\",\n      key: comment.id\n    }, [_createCommentVNode(\" Display comments here \"), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"p\", _hoisted_6, _toDisplayString(comment.username), 1 /* TEXT */), _createElementVNode(\"p\", _hoisted_7, _toDisplayString(comment.text), 1 /* TEXT */), _createElementVNode(\"p\", _hoisted_8, _toDisplayString(comment.date), 1 /* TEXT */), _createCommentVNode(\" <p class=\\\"comment-region\\\">{{ comment.region }}</p>  NEEDS STYLING  \")])]);\n  }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" Add Comment Button \"), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = $event => $data.showCommentBox = !$data.showCommentBox)\n  }, \"Add Comment\"), _createCommentVNode(\" Comment Box Section \"), $data.showCommentBox ? (_openBlock(), _createElementBlock(\"div\", _hoisted_9, [_withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.newComment = $event),\n    placeholder: \"Write your comment here...\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.newComment]]), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.submitComment && $options.submitComment(...args))\n  }, \"Submit\")])) : _createCommentVNode(\"v-if\", true)])]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","$data","post","_hoisted_1","_toDisplayString","title","instructions","date","_createCommentVNode","_hoisted_2","_hoisted_3","_hoisted_4","_Fragment","_renderList","comments","comment","key","id","_hoisted_5","_hoisted_6","username","_hoisted_7","text","_hoisted_8","onClick","_cache","$event","showCommentBox","_hoisted_9","newComment","placeholder","args","$options","submitComment"],"sources":["C:\\Users\\willa\\Documents\\GitHub\\ITSC-3155\\TastyTalks\\tastytalks\\src\\views\\FullscreenQuestion.vue"],"sourcesContent":["<template>\r\n    <main>\r\n\r\n      <div class=\"full-post-view\" v-if=\"post\">\r\n        <h1>{{ post.title }}</h1>\r\n        <p>{{ post.instructions }}</p>\r\n        <p>{{ post.date }}</p>\r\n        <!-- Display other post details and comments -->\r\n      </div>\r\n\r\n      <div v-else>\r\n        Loading post...\r\n      </div>\r\n\r\n      <div class=\"comments-container\">\r\n        <h2 class=\"comments-header\">Comments:</h2>\r\n        <!-- Comments Section -->\r\n        <div class=\"comments\" v-for=\"comment in comments\" :key=\"comment.id\">\r\n          <!-- Display comments here -->\r\n          <div class=\"comment-card\">\r\n            <p class=\"comment-author\">{{ comment.username }}</p>\r\n            <p class=\"comment-text\">{{ comment.text }}</p>\r\n            <p class=\"comment-date\">{{ comment.date }}</p>\r\n            <!-- <p class=\"comment-region\">{{ comment.region }}</p>  NEEDS STYLING  -->  \r\n          </div>\r\n        </div>\r\n        <!-- Add Comment Button -->\r\n        <button @click=\"showCommentBox = !showCommentBox\">Add Comment</button>\r\n\r\n        <!-- Comment Box Section -->\r\n        <div v-if=\"showCommentBox\" class=\"comment-box\">\r\n          <textarea v-model=\"newComment\" placeholder=\"Write your comment here...\"></textarea>\r\n          <button @click=\"submitComment\">Submit</button>\r\n        </div>\r\n    </div>\r\n    </main>\r\n  </template>\r\n  \r\n  \r\n  <script>\r\n import { ref, reactive } from 'vue';\r\n  import { useRoute } from 'vue-router'; // Import useRoute\r\n  import { addDoc, doc, getDoc, getDocs, collection, query, where } from 'firebase/firestore';\r\n  import { db, auth } from '../firebase';\r\n  \r\n  export default {\r\n    data(){\r\n      const route = useRoute(); // Use the useRoute hook\r\n      const post = ref(null);\r\n      const showCommentBox = ref(false); // For toggling the comment box\r\n      const newComment = ref(''); // For storing new comment text\r\n      const user = auth.currentUser;\r\n\r\n      return{\r\n        route,\r\n        post,\r\n        showCommentBox,\r\n        newComment,\r\n        comments: reactive([]),\r\n        user\r\n      };\r\n    },\r\n    mounted(){\r\n      this.fetchPost()\r\n    },\r\n    methods: {\r\n      //fetch recipe\r\n      async fetchPost() {\r\n        const postId = this.route.params.id; // Access the id parameter from the route\r\n        if (postId) {\r\n          const postDoc = doc(db, 'questions', postId);\r\n          const docSnap = await getDoc(postDoc);\r\n  \r\n          if (docSnap.exists()) {\r\n            const postData = docSnap.data()\r\n            this.post = { id: docSnap.id, ...postData}\r\n\r\n            // Fetch comments on the server side\r\n            const commentsCollectionRef = collection(db, 'questions', postId, 'comments');\r\n            const commentsSnapshot = await getDocs(commentsCollectionRef);\r\n            this.comments = commentsSnapshot.docs.map(doc => doc.data());\r\n          } else {\r\n            console.log(\"No such document!\");\r\n          }\r\n        } else {\r\n          console.error(\"Post ID is undefined\");\r\n        }\r\n      },\r\n      \r\n      //submit comment\r\n      async submitComment() {\r\n\r\n        const currentUser = auth.currentUser;\r\n        if(currentUser){\r\n          try{\r\n            //fetches user data from the user document, based on the authId\r\n            const userCollection = collection(db, 'users');   // Create a reference to the \"users\" collection\r\n            const userQuery = query(userCollection, where('authId', '==', currentUser.uid));   // Create a query to find the user document by authId\r\n            const userQuerySnapshot = await getDocs(userQuery);   // Fetch the user document based on the query\r\n            \r\n            if (!userQuerySnapshot.empty) { // Check if there are any matching documents\r\n              const userData = userQuerySnapshot.docs[0].data();  // Assuming there is only one user document per authId\r\n              this.user = userData;\r\n              this.username = userData.username;\r\n              this.region = userData.region;\r\n            } else {\r\n              console.log('User document not found.');\r\n            }\r\n          } catch (error) {\r\n              console.error('Error fetching user data: ', error)\r\n          }\r\n          // create new comment object\r\n          const newCommentObject = {\r\n            username: this.username,\r\n            region: this.region,\r\n            text: this.newComment,\r\n            date: new Date().toISOString(),\r\n          }; \r\n\r\n          // update comments in document\r\n          try{\r\n\r\n            const postId = this.route.params.id;\r\n            const commentsCollectionRef = collection(db, 'questions', postId, 'comments'); //get comments collection ref\r\n            //add new document to the comments collection\r\n            await addDoc(commentsCollectionRef, newCommentObject);\r\n\r\n            // Update the local comments array\r\n            this.comments.push(newCommentObject);\r\n            this.newComment = ''; // Clear the comment box after submission\r\n            this.showCommentBox = false; // Hide the comment box after submission\r\n\r\n          } catch (error) {\r\n            console.error('Error adding comment: ', error);\r\n          }\r\n        } else {\r\n          console.log('User not authenticated');\r\n        }\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  \r\n  <style scoped>\r\n\r\n  h1{\r\n    color: black;\r\n  }\r\n  h2{\r\n    font-size: 25px;\r\n  }\r\n  .full-post-view {\r\n    max-width: 800px;\r\n    margin: 20px auto;\r\n    padding: 20px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 8px;\r\n    background-color: white;\r\n    min-height: 500px;\r\n  }\r\n  .comments-container{\r\n    max-width: 800px;\r\n    margin: 20px auto;\r\n    padding: 20px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 8px;\r\n    background-color: white;\r\n  }\r\n  .comment-box textarea {\r\n    width: 100%; /* Full width of the container */\r\n    max-width: 100%; /* Max width restricted to the container width */\r\n    box-sizing: border-box; /* Include padding and border in the element's total width and height */\r\n    overflow: auto; /* Add scrollbars if content overflows */\r\n    margin-top: 10px;\r\n    padding: 10px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 4px;\r\n  }\r\n\r\n  .comments-container button {\r\n    margin-top: 10px;\r\n    padding: 6px 12px;\r\n    background-color: rgb(104, 150, 56);\r\n    color: white;\r\n    border: none;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n  }\r\n\r\n  .comment-box button:hover {\r\n    background-color: #0056b3;\r\n  }\r\n  /* Comment Card */\r\n  .comment-card {\r\n    background-color: white;\r\n    border: 1px solid #ccc;\r\n    border-radius: 8px;\r\n    padding: 15px;\r\n    margin-top: 20px;\r\n  }\r\n\r\n  .comment-author {\r\n    font-weight: bold;\r\n    margin-bottom: 5px;\r\n  }\r\n\r\n  .comment-text {\r\n    margin-bottom: 10px;\r\n  }\r\n\r\n  .comment-date {\r\n    font-size: 0.8em;\r\n    color: #666;\r\n  }\r\n\r\n  </style>\r\n  "],"mappings":";;;;EAGWA,KAAK,EAAC;;;;;;EAWNA,KAAK,EAAC;AAAoB;gEAC7BC,mBAAA,CAA0C;EAAtCD,KAAK,EAAC;AAAiB,GAAC,WAAS;;EAI9BA,KAAK,EAAC;AAAc;;EACpBA,KAAK,EAAC;AAAgB;;EACtBA,KAAK,EAAC;AAAc;;EACpBA,KAAK,EAAC;AAAc;;;EAQAA,KAAK,EAAC;;;uBA7BrCE,mBAAA,CAkCO,eAhC6BC,KAAA,CAAAC,IAAI,I,cAAtCF,mBAAA,CAKM,OALNG,UAKM,GAJJJ,mBAAA,CAAyB,YAAAK,gBAAA,CAAlBH,KAAA,CAAAC,IAAI,CAACG,KAAK,kBACjBN,mBAAA,CAA8B,WAAAK,gBAAA,CAAxBH,KAAA,CAAAC,IAAI,CAACI,YAAY,kBACvBP,mBAAA,CAAsB,WAAAK,gBAAA,CAAhBH,KAAA,CAAAC,IAAI,CAACK,IAAI,kBACfC,mBAAA,6CAAgD,C,oBAGlDR,mBAAA,CAEM,OAAAS,UAAA,EAFM,mBAEZ,IAEAV,mBAAA,CAoBI,OApBJW,UAoBI,GAnBFC,UAA0C,EAC1CH,mBAAA,sBAAyB,G,kBACzBR,mBAAA,CAQMY,SAAA,QAAAC,WAAA,CARkCZ,KAAA,CAAAa,QAAQ,EAAnBC,OAAO;yBAApCf,mBAAA,CAQM;MARDF,KAAK,EAAC,UAAU;MAA8BkB,GAAG,EAAED,OAAO,CAACE;QAC9DT,mBAAA,2BAA8B,EAC9BT,mBAAA,CAKM,OALNmB,UAKM,GAJJnB,mBAAA,CAAoD,KAApDoB,UAAoD,EAAAf,gBAAA,CAAvBW,OAAO,CAACK,QAAQ,kBAC7CrB,mBAAA,CAA8C,KAA9CsB,UAA8C,EAAAjB,gBAAA,CAAnBW,OAAO,CAACO,IAAI,kBACvCvB,mBAAA,CAA8C,KAA9CwB,UAA8C,EAAAnB,gBAAA,CAAnBW,OAAO,CAACR,IAAI,kBACvCC,mBAAA,0EAA2E,C;kCAG/EA,mBAAA,wBAA2B,EAC3BT,mBAAA,CAAsE;IAA7DyB,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEzB,KAAA,CAAA0B,cAAc,IAAI1B,KAAA,CAAA0B,cAAc;KAAE,aAAW,GAE7DnB,mBAAA,yBAA4B,EACjBP,KAAA,CAAA0B,cAAc,I,cAAzB3B,mBAAA,CAGM,OAHN4B,UAGM,G,gBAFJ7B,mBAAA,CAAmF;+DAAhEE,KAAA,CAAA4B,UAAU,GAAAH,MAAA;IAAEI,WAAW,EAAC;iDAAxB7B,KAAA,CAAA4B,UAAU,E,GAC7B9B,mBAAA,CAA8C;IAArCyB,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAM,IAAA,KAAEC,QAAA,CAAAC,aAAA,IAAAD,QAAA,CAAAC,aAAA,IAAAF,IAAA,CAAa;KAAE,QAAM,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}