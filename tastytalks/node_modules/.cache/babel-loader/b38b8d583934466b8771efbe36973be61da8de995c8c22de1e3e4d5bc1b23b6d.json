{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, reactive } from 'vue';\nimport { useRoute } from 'vue-router'; // Import useRoute\nimport { addDoc, doc, getDoc, getDocs, collection, query, where } from 'firebase/firestore';\nimport { db, auth } from '../firebase';\nexport default {\n  data() {\n    const route = useRoute(); // Use the useRoute hook\n    const post = ref(null);\n    const showCommentBox = ref(false); // For toggling the comment box\n    const newComment = ref(''); // For storing new comment text\n    const user = auth.currentUser;\n    return {\n      route,\n      post,\n      showCommentBox,\n      newComment,\n      comments: reactive([]),\n      user\n    };\n  },\n  mounted() {\n    this.fetchPost();\n  },\n  methods: {\n    //fetch recipe\n    async fetchPost() {\n      const postId = this.route.params.id; // Access the id parameter from the route\n      if (postId) {\n        const postDoc = doc(db, 'recipes', postId);\n        const docSnap = await getDoc(postDoc);\n        if (docSnap.exists()) {\n          const postData = docSnap.data();\n          this.post = {\n            id: docSnap.id,\n            ...postData\n          };\n\n          // Fetch comments on the server side\n          const commentsCollectionRef = collection(db, 'recipes', postId, 'comments');\n          const commentsSnapshot = await getDocs(commentsCollectionRef);\n          this.comments = commentsSnapshot.docs.map(doc => doc.data());\n        } else {\n          console.log(\"No such document!\");\n        }\n      } else {\n        console.error(\"Post ID is undefined\");\n      }\n    },\n    //submit comment\n    async submitComment() {\n      const currentUser = auth.currentUser;\n      if (currentUser) {\n        try {\n          //fetches user data from the user document, based on the authId\n          const userCollection = collection(db, 'users'); // Create a reference to the \"users\" collection\n          const userQuery = query(userCollection, where('authId', '==', currentUser.uid)); // Create a query to find the user document by authId\n          const userQuerySnapshot = await getDocs(userQuery); // Fetch the user document based on the query\n\n          if (!userQuerySnapshot.empty) {\n            // Check if there are any matching documents\n            const userData = userQuerySnapshot.docs[0].data(); // Assuming there is only one user document per authId\n            this.user = userData;\n            this.username = userData.username;\n            this.region = userData.region;\n          } else {\n            console.log('User document not found.');\n          }\n        } catch (error) {\n          console.error('Error fetching user data: ', error);\n        }\n        // create new comment object\n        const newCommentObject = {\n          username: this.username,\n          region: this.region,\n          text: this.newComment,\n          date: new Date().toISOString()\n        };\n\n        // update comments in document\n        try {\n          const postId = this.route.params.id;\n          const commentsCollectionRef = collection(db, 'recipes', postId, 'comments'); //get comments collection ref\n          //add new document to the comments collection\n          await addDoc(commentsCollectionRef, newCommentObject);\n\n          // Update the local comments array\n          this.comments.push(newCommentObject);\n          this.newComment = ''; // Clear the comment box after submission\n          this.showCommentBox = false; // Hide the comment box after submission\n        } catch (error) {\n          console.error('Error adding comment: ', error);\n        }\n      } else {\n        console.log('User not authenticated');\n      }\n    }\n  }\n};","map":{"version":3,"names":["ref","reactive","useRoute","addDoc","doc","getDoc","getDocs","collection","query","where","db","auth","data","route","post","showCommentBox","newComment","user","currentUser","comments","mounted","fetchPost","methods","postId","params","id","postDoc","docSnap","exists","postData","commentsCollectionRef","commentsSnapshot","docs","map","console","log","error","submitComment","userCollection","userQuery","uid","userQuerySnapshot","empty","userData","username","region","newCommentObject","text","date","Date","toISOString","push"],"sources":["C:\\Users\\willa\\Documents\\GitHub\\ITSC-3155\\TastyTalks\\tastytalks\\src\\views\\FullscreenRecipe.vue"],"sourcesContent":["<template>\r\n    <main>\r\n\r\n      <div class=\"full-post-view\" v-if=\"post\">\r\n        <h1>{{ post.title }}</h1>\r\n        <p>{{ post.instructions }}</p>\r\n        <p>{{ post.date }}</p>\r\n        <!-- Display other post details and comments -->\r\n      </div>\r\n\r\n      <div v-else>\r\n        Loading post...\r\n      </div>\r\n\r\n      <div class=\"comments-container\">\r\n        <h2 class=\"comments-header\">Comments:</h2>\r\n        <!-- Comments Section -->\r\n        <div class=\"comments\" v-for=\"comment in comments\" :key=\"comment.id\">\r\n          <!-- Display comments here -->\r\n          <div class=\"comment-card\">\r\n            <p class=\"comment-author\">{{ comment.username }}</p>\r\n            <p class=\"comment-text\">{{ comment.text }}</p>\r\n            <p class=\"comment-date\">{{ comment.date }}</p>\r\n            <!-- <p class=\"comment-region\">{{ comment.region }}</p>  NEEDS STYLING  -->  \r\n          </div>\r\n        </div>\r\n        <!-- Add Comment Button -->\r\n        <button @click=\"showCommentBox = !showCommentBox\">Add Comment</button>\r\n\r\n        <!-- Comment Box Section -->\r\n        <div v-if=\"showCommentBox\" class=\"comment-box\">\r\n          <textarea v-model=\"newComment\" placeholder=\"Write your comment here...\"></textarea>\r\n          <button @click=\"submitComment\">Submit</button>\r\n        </div>\r\n    </div>\r\n    </main>\r\n  </template>\r\n  \r\n  \r\n  <script>\r\n  import { ref, reactive } from 'vue';\r\n  import { useRoute } from 'vue-router'; // Import useRoute\r\n  import { addDoc, doc, getDoc, getDocs, collection, query, where } from 'firebase/firestore';\r\n  import { db, auth } from '../firebase';\r\n  \r\n  export default {\r\n    data(){\r\n      const route = useRoute(); // Use the useRoute hook\r\n      const post = ref(null);\r\n      const showCommentBox = ref(false); // For toggling the comment box\r\n      const newComment = ref(''); // For storing new comment text\r\n      const user = auth.currentUser;\r\n\r\n      return{\r\n        route,\r\n        post,\r\n        showCommentBox,\r\n        newComment,\r\n        comments: reactive([]),\r\n        user\r\n      };\r\n    },\r\n    mounted(){\r\n      this.fetchPost()\r\n    },\r\n    methods: {\r\n      //fetch recipe\r\n      async fetchPost() {\r\n        const postId = this.route.params.id; // Access the id parameter from the route\r\n        if (postId) {\r\n          const postDoc = doc(db, 'recipes', postId);\r\n          const docSnap = await getDoc(postDoc);\r\n  \r\n          if (docSnap.exists()) {\r\n            const postData = docSnap.data()\r\n            this.post = { id: docSnap.id, ...postData}\r\n\r\n            // Fetch comments on the server side\r\n            const commentsCollectionRef = collection(db, 'recipes', postId, 'comments');\r\n            const commentsSnapshot = await getDocs(commentsCollectionRef);\r\n            this.comments = commentsSnapshot.docs.map(doc => doc.data());\r\n          } else {\r\n            console.log(\"No such document!\");\r\n          }\r\n        } else {\r\n          console.error(\"Post ID is undefined\");\r\n        }\r\n      },\r\n      \r\n      //submit comment\r\n      async submitComment() {\r\n\r\n        const currentUser = auth.currentUser;\r\n        if(currentUser){\r\n          try{\r\n            //fetches user data from the user document, based on the authId\r\n            const userCollection = collection(db, 'users');   // Create a reference to the \"users\" collection\r\n            const userQuery = query(userCollection, where('authId', '==', currentUser.uid));   // Create a query to find the user document by authId\r\n            const userQuerySnapshot = await getDocs(userQuery);   // Fetch the user document based on the query\r\n            \r\n            if (!userQuerySnapshot.empty) { // Check if there are any matching documents\r\n              const userData = userQuerySnapshot.docs[0].data();  // Assuming there is only one user document per authId\r\n              this.user = userData;\r\n              this.username = userData.username;\r\n              this.region = userData.region;\r\n            } else {\r\n              console.log('User document not found.');\r\n            }\r\n          } catch (error) {\r\n              console.error('Error fetching user data: ', error)\r\n          }\r\n          // create new comment object\r\n          const newCommentObject = {\r\n            username: this.username,\r\n            region: this.region,\r\n            text: this.newComment,\r\n            date: new Date().toISOString(),\r\n          }; \r\n\r\n          // update comments in document\r\n          try{\r\n\r\n            const postId = this.route.params.id;\r\n            const commentsCollectionRef = collection(db, 'recipes', postId, 'comments'); //get comments collection ref\r\n            //add new document to the comments collection\r\n            await addDoc(commentsCollectionRef, newCommentObject);\r\n\r\n            // Update the local comments array\r\n            this.comments.push(newCommentObject);\r\n            this.newComment = ''; // Clear the comment box after submission\r\n            this.showCommentBox = false; // Hide the comment box after submission\r\n\r\n          } catch (error) {\r\n            console.error('Error adding comment: ', error);\r\n          }\r\n        } else {\r\n          console.log('User not authenticated');\r\n        }\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  \r\n  <style scoped>\r\n\r\n  h1{\r\n    color: black;\r\n  }\r\n  h2{\r\n    font-size: 25px;\r\n  }\r\n  .full-post-view {\r\n    max-width: 800px;\r\n    margin: 20px auto;\r\n    padding: 20px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 8px;\r\n    background-color: white;\r\n    min-height: 500px;\r\n  }\r\n  .comments-container{\r\n    max-width: 800px;\r\n    margin: 20px auto;\r\n    padding: 20px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 8px;\r\n    background-color: white;\r\n  }\r\n  .comment-box textarea {\r\n    width: 100%; /* Full width of the container */\r\n    max-width: 100%; /* Max width restricted to the container width */\r\n    box-sizing: border-box; /* Include padding and border in the element's total width and height */\r\n    overflow: auto; /* Add scrollbars if content overflows */\r\n    margin-top: 10px;\r\n    padding: 10px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 4px;\r\n  }\r\n\r\n  .comments-container button {\r\n    margin-top: 10px;\r\n    padding: 6px 12px;\r\n    background-color: rgb(104, 150, 56);\r\n    color: white;\r\n    border: none;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n  }\r\n\r\n  .comment-box button:hover {\r\n    background-color: #0056b3;\r\n  }\r\n  /* Comment Card */\r\n  .comment-card {\r\n    background-color: white;\r\n    border: 1px solid #ccc;\r\n    border-radius: 8px;\r\n    padding: 15px;\r\n    margin-top: 20px;\r\n  }\r\n\r\n  .comment-author {\r\n    font-weight: bold;\r\n    margin-bottom: 5px;\r\n  }\r\n\r\n  .comment-text {\r\n    margin-bottom: 10px;\r\n  }\r\n\r\n  .comment-date {\r\n    font-size: 0.8em;\r\n    color: #666;\r\n  }\r\n\r\n  </style>\r\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}