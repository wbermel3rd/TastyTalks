{"ast":null,"code":"import { addDoc, collection, updateDoc, doc, arrayUnion, getDocs, query, where } from 'firebase/firestore';\nimport { auth } from '../firebase';\nimport { db } from '../firebase';\nimport { ref } from 'vue';\nexport default {\n  setup() {\n    const question_form = ref({\n      title: '',\n      region: '',\n      description: '' // Add description to the form data\n    });\n\n    // Create a question post in the database\n    const addPost = async event => {\n      event.preventDefault();\n      const user = auth.currentUser;\n      if (user) {\n        const userId = auth.currentUser.uid;\n        try {\n          const userQuery = query(collection(db, 'users'), where('authId', '==', auth.currentUser.uid));\n          const userSnapshot = await getDocs(userQuery);\n          const userDoc = userSnapshot.docs[0];\n          const userDocId = userDoc.id;\n          if (userDoc.exists()) {\n            const userData = userDoc.data();\n            console.log(\"userData:\", userData);\n            if (userData && userData.username && userData.region) {\n              const username = userData.username;\n              const userRegion = userData.region;\n              console.log(\"username:\", username);\n              console.log(\"userRegion:\", userRegion);\n              const questionRef = await addDoc(collection(db, 'questions'), {\n                date: Date.now(),\n                title: question_form.value.title,\n                regionID: question_form.value.region,\n                description: question_form.value.description,\n                user: userId,\n                username: username,\n                userRegion: userRegion\n              });\n\n              //add the questionId to the user's created questions\n              await updateDoc(doc(db, 'users', userDocId), {\n                questions: arrayUnion(questionRef.id)\n              });\n\n              //redirect \n              window.location.href = '/questionfeed';\n            } else {\n              console.error(\"Error fetching user data, username, or regionID is undefined\");\n            }\n          } else {\n            console.error(\"User document does not exist\");\n          }\n        } catch (error) {\n          console.error(\"Error fetching user document\", error);\n        }\n      } else {\n        console.log(\"User not authenticated\");\n      }\n    };\n    return {\n      question_form,\n      addPost\n    };\n  }\n};","map":{"version":3,"names":["addDoc","collection","updateDoc","doc","arrayUnion","getDocs","query","where","auth","db","ref","setup","question_form","title","region","description","addPost","event","preventDefault","user","currentUser","userId","uid","userQuery","userSnapshot","userDoc","docs","userDocId","id","exists","userData","data","console","log","username","userRegion","questionRef","date","Date","now","value","regionID","questions","window","location","href","error"],"sources":["C:\\Users\\willa\\Documents\\GitHub\\ITSC-3155\\TastyTalks\\tastytalks\\src\\views\\CreateQuestion.vue"],"sourcesContent":["<template>\r\n  <main>\r\n    <div class=\"divForm\">\r\n      <!-- FORM CONTAINER -->\r\n      <div class=\"form-newPost\">\r\n        <div class=\"title-CreateNewPost\">\r\n          <h1>Create new question</h1>\r\n        </div>\r\n\r\n        <!-- FORM -->\r\n        <!-- The form action goes to /posts because the page should be redirected to the post page with all the posts when the person click submit -->\r\n        <form action=\"/post\" enctype=\"multipart/form-data\" method=\"POST\">\r\n          <!-- Question Name  -->\r\n          <label for=\"title\">Question Name</label>\r\n          <input type=\"text\" name=\"questionName\" id=\"questionName\" placeholder=\"Question Name\" v-model=\"question_form.title\" required>\r\n\r\n          <!-- Question Category -->\r\n          <label for=\"category\">Region</label>\r\n          <select name=\"countryOfOrigin\" id=\"countrySelect\" v-model=\"question_form.region\" required>\r\n            <option value=\"\" selected disabled>Select Region</option>\r\n            <option value=\"1\">Asia-Pacific</option>\r\n            <option value=\"2\">Caribbean</option>\r\n            <option value=\"3\">Central America</option>\r\n            <option value=\"4\">Central Asia</option>\r\n            <option value=\"5\">Eastern Europe</option>\r\n            <option value=\"6\">Middle East</option>\r\n            <option value=\"7\">Nordic Countries</option>\r\n            <option value=\"8\">North America</option>\r\n            <option value=\"9\">Northern Africa</option>\r\n            <option value=\"10\">Oceania</option>\r\n            <option value=\"11\">Southern Africa</option>\r\n            <option value=\"12\">South America</option>\r\n            <option value=\"13\">Southeast Asia</option>\r\n            <option value=\"14\">Western Europe</option>\r\n          </select>\r\n\r\n          <!-- Instructions, description, and details -->\r\n          <label for=\"details\">Question Instructions and Description</label>\r\n          <textarea id=\"text\" name=\"questionDescription\" minlength=\"10\" placeholder=\"Question Details...\" v-model=\"question_form.description\" required></textarea>\r\n\r\n          <input type=\"submit\" @click=\"addPost\" value=\"Submit\">\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </main>\r\n</template>\r\n\r\n<script>\r\nimport { addDoc, collection, updateDoc, doc, arrayUnion, getDocs, query, where } from 'firebase/firestore';\r\nimport { auth } from '../firebase';\r\nimport { db } from '../firebase';\r\nimport { ref } from 'vue';\r\n\r\nexport default {\r\n  setup() {\r\n    const question_form = ref({\r\n      title: '',\r\n      region: '',\r\n      description: '', // Add description to the form data\r\n    });\r\n\r\n    // Create a question post in the database\r\n    const addPost = async (event) => {\r\n\r\n      event.preventDefault();\r\n\r\n      const user = auth.currentUser\r\n\r\n      if(user){\r\n\r\n        const userId = auth.currentUser.uid\r\n\r\n        try{\r\n          \r\n          const userQuery = query(collection(db, 'users'), where('authId', '==', auth.currentUser.uid));\r\n          const userSnapshot = await getDocs(userQuery);\r\n          const userDoc = userSnapshot.docs[0]\r\n          const userDocId = userDoc.id\r\n\r\n          if (userDoc.exists()) {\r\n            const userData = userDoc.data();\r\n            console.log(\"userData:\", userData);\r\n            \r\n            if(userData && userData.username && userData.region) {\r\n\r\n              const username = userData.username\r\n              const userRegion = userData.region\r\n\r\n              console.log(\"username:\", username);\r\n              console.log(\"userRegion:\", userRegion);\r\n\r\n              const questionRef = await addDoc(collection(db, 'questions'), {\r\n                date: Date.now(),\r\n                title: question_form.value.title,\r\n                regionID: question_form.value.region,\r\n                description: question_form.value.description,\r\n                user: userId,\r\n                username: username,\r\n                userRegion: userRegion,\r\n              });\r\n\r\n              //add the questionId to the user's created questions\r\n              await updateDoc(doc(db, 'users', userDocId), {\r\n                  questions: arrayUnion(questionRef.id),\r\n              });\r\n\r\n              //redirect \r\n              window.location.href = '/questionfeed';\r\n            } else{\r\n              console.error(\"Error fetching user data, username, or regionID is undefined\")\r\n            }\r\n          } else {\r\n            console.error(\"User document does not exist\")\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error fetching user document\", error)\r\n        }\r\n      } else {\r\n      console.log(\"User not authenticated\")\r\n      }\r\n    };\r\n\r\n    return {\r\n      question_form,\r\n      addPost,\r\n    };\r\n  },\r\n};\r\n</script>\r\n  \r\n  <style>\r\n  /* Add your styling for clickable-div here */\r\n  .clickable-div {\r\n    cursor: pointer;\r\n    border: 1px solid #ccc;\r\n    padding: 20px;\r\n    margin: 10px;\r\n    text-align: center;\r\n    transition: background-color 0.3s; /* Add a smooth transition effect */\r\n  }\r\n\r\n  .clickable-div:hover {\r\n    background-color: #e0e0e0; /* Change the background color on hover */\r\n  }\r\n\r\n\r\n/* /////// Form ///////////////////// */\r\n\r\n.form-newPost {\r\n    border-radius: 5px;\r\n    padding: 20px;\r\n    background-color: var(--Trying);\r\n    font-family: var(--primaryFont);\r\n    /* Control the width of the Question Form container */\r\n    /* max-width: 800px; */\r\n  }\r\n\r\n\r\n.title-CreateNewPost h1{\r\n    text-align: center;\r\n    color: #4c934c;\r\n    /* justify-content: center; */\r\n\r\n}\r\n\r\nlabel{\r\n    font-family: var(--primaryFont);\r\n    color: #4c934c;\r\n    font-size: 20px;\r\n    font-weight: bold;\r\n}\r\n\r\ninput[type=text], select, textarea[type=text], input[type=file], input[type=date], input[type=datetime], input[type=datetime-local] {\r\n    width: 100%;\r\n    padding: 12px 20px;\r\n    margin: 15px 0;\r\n    display: inline-block;\r\n    border: 1px solid #ccc;\r\n    border-radius: 4px;\r\n    box-sizing: border-box;\r\n  }\r\n\r\n\r\ninput[type=submit] {\r\n    width: 100%;\r\n    background-color: var(--fourthColor);\r\n    color: white;\r\n    padding: 14px 20px;\r\n    margin: 8px 0;\r\n    border: none;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n  }\r\n\r\ninput[type=submit]:hover {\r\n    background-color: var(--lightFourthColor)\r\n  }\r\n\r\n  textarea {\r\n    width: 100%;\r\n    padding: 12px 20px;\r\n    margin: 15px 0;\r\n    display: inline-block;\r\n    border: 1px solid #ccc;\r\n    border-radius: 4px;\r\n    box-sizing: border-box;\r\n  }\r\n\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}